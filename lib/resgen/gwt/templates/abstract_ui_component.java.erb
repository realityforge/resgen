/* DO NOT EDIT: File is auto-generated */
package <%= to_package(uibinder_file.gwt.qualified_abstract_ui_component_name) %>;

@javax.annotation.Generated( "Resgen" )
@java.lang.SuppressWarnings( { "PMD.FieldDeclarationsShouldBeAtStartOfClass", "PMD.ConstructorCallsOverridableMethod", "rawtypes" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS" )
public abstract class <%= uibinder_file.gwt.abstract_ui_component_name %>
  implements com.google.gwt.user.client.ui.IsWidget
{
<% uibinder_file.fields.each do |field| -%>
  protected static final String <%= Reality::Naming.uppercase_constantize(field.name.gsub(/^\_/,'')) %> = "<%= field.name %>";
<% end -%>
<% unless uibinder_file.fields.empty? -%>

<% end -%>
<% uibinder_file.styles.each do |style| -%>
  public interface <%= Reality::Naming.pascal_case(style.name) %>
    extends com.google.gwt.resources.client.CssResource
  {
<% style.css_classes.each do |key| -%>
    @ClassName( "<%= key -%>" )
    String <%= Reality::Naming.camelize(key) -%>();
<% end -%>
  }

<% end -%>
  @com.google.gwt.uibinder.client.UiTemplate( "<%= uibinder_file.name %>.ui.xml" )
  interface Binder
    extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, <%= uibinder_file.gwt.qualified_ui_component_name %>>
  {
  }

  private static final Binder UI_BINDER = com.google.gwt.core.client.GWT.create( Binder.class );

  private com.google.gwt.user.client.ui.Widget _widget;
<% uibinder_file.fields.each do |field| -%>
  @com.google.gwt.uibinder.client.UiField<% if field.provided? %>( provided = true )<% end %>
  <%= field.type %> <%= field.name %>;
<% end -%>
<% uibinder_file.parameters.each do |parameter| -%>
  @com.google.gwt.uibinder.client.UiField<% if parameter.self? %>( provided = true )<% end %>
  <%= parameter.type %> <%= parameter.name %>;
<% end -%>
<% uibinder_file.styles.each do |style| -%>
  @com.google.gwt.uibinder.client.UiField
  <%= style.type %> <%= style.name %>;
<% end -%>
<% uibinder_file.images.each do |image| -%>
  @com.google.gwt.uibinder.client.UiField
  com.google.gwt.resources.client.ImageResource <%= image.name %>;
<% end -%>
<% uibinder_file.datas.each do |data| -%>
  @com.google.gwt.uibinder.client.UiField
  com.google.gwt.resources.client.DataResource <%= data.name %>;
<% end -%>

  protected <%= uibinder_file.gwt.abstract_ui_component_name %>()
  {
    this( true );
  }

  protected <%= uibinder_file.gwt.abstract_ui_component_name %>( final boolean createAndBindUi )
  {
    if ( createAndBindUi )
    {
      createAndBindUi();
    }
  }

  @java.lang.Override
  public com.google.gwt.user.client.ui.Widget asWidget()
  {
    return _widget;
  }

  protected void createAndBindUi()
  {
<% uibinder_file.parameters.select{|parameter| parameter.self?}.each do |parameter| -%>
    <%= parameter.name %> = (<%= parameter.type %>) this;
<% end -%>
    _widget = UI_BINDER.createAndBindUi( (<%= uibinder_file.gwt.qualified_ui_component_name %>) this );
<% uibinder_file.styles.each do |style| -%>
    <%= style.name %>.ensureInjected();
<% end -%>
<% unless uibinder_file.fields.empty? && uibinder_file.parameters.empty? -%>
<% uibinder_file.asset_directory.catalog.repository.catalogs.each do |catalog| -%>
<% catalog.asset_directories.each do |asset_directory| -%>
<% (uibinder_file.fields + uibinder_file.parameters).each do |field| -%>
<% if field.type.to_s == asset_directory.gwt.qualified_bundle_name.to_s -%>
<% asset_directory.css_files.each do |css_file| -%>
    <%= field.name %>.<%= Reality::Naming.camelize(css_file.name) %>().ensureInjected();
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
  }
}
